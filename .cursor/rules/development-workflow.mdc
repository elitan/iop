---
description: 
globs: 
alwaysApply: false
---
# Development Workflow

## Local Development

### Prerequisites
- Bun or Node.js 18+
- TypeScript knowledge
- Understanding of Docker and SSH

### Setup
```bash
git clone <repository>
cd luma
bun install  # or npm install
```

### Development Commands

From [package.json](mdc:package.json):

- `bun run build` - Compile TypeScript to dist/
- `bun run start` - Run from source ([src/index.ts](mdc:src/index.ts))
- `bun test` - Run test suite

### File Structure

- **Source**: [src/](mdc:src) - All TypeScript source code
- **Build Output**: `dist/` - Compiled JavaScript (git-ignored)
- **Examples**: [examples/](mdc:examples) - Example configurations
- **Documentation**: [README.md](mdc:README.md), [PUBLISHING.md](mdc:PUBLISHING.md)

## Testing

### Test Location
- [test/](mdc:test) - Test files
- Use Bun's built-in test runner

### Testing Guidelines
- Test CLI commands in isolation
- Mock SSH connections for unit tests
- Test configuration validation
- Verify deployment logic without actual servers

## Build Process

### TypeScript Compilation
- Source: [src/](mdc:src)
- Output: `dist/`
- Config: [tsconfig.json](mdc:tsconfig.json)
- Entry: [src/index.ts](mdc:src/index.ts) â†’ `dist/index.js`

### CLI Binary
- Binary location: `dist/index.js`
- Shebang: `#!/usr/bin/env node`
- Package bin: `"luma": "dist/index.js"`

## Publishing Workflow

### Version Management
```bash
# Patch release
bun run release:patch

# Minor release  
bun run release:minor

# Major release
bun run release:major

# Pre-release
bun run release:alpha
bun run release:beta
bun run release:rc
```

### Publishing Steps
1. Version bump with `npm version`
2. Git tag creation
3. Push to origin with tags
4. Publish to npm with `bun publish`

### Package Configuration
- Package: `@elitan/luma`
- Registry: npm public
- Files included: `dist/**/*`, [README.md](mdc:README.md)
- Access: public

### Dry Run
```bash
bun run publish:dry-run
```

Use this to test publishing without actually publishing to npm.
