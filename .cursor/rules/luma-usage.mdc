---
description: 
globs: 
alwaysApply: true
---
# Luma Usage Patterns

## Project Registration

To register a new project with Luma, send a POST request to the API server (port 8081):

```bash
curl -X POST http://localhost:8081/projects -H "Content-Type: application/json" -d '{
  "name": "my-app",
  "docker_image": "my-image:latest",
  "env_vars": {"KEY": "VALUE"},
  "container_port": 8000,
  "hostname": "myapp.localhost"
}'
```

The project configuration is defined in [types/project.go](mdc:types/project.go) and handled by [api/project_handler.go](mdc:api/project_handler.go).

## Request Flow

1. An HTTP request arrives at the proxy server (port 8080) with a specific hostname
2. The [proxy/reverse_proxy.go](mdc:proxy/reverse_proxy.go) component examines the hostname to identify the project
3. The proxy checks with [manager/state_manager.go](mdc:manager/state_manager.go) to determine if the container is running
4. If not running, [manager/container_manager.go](mdc:manager/container_manager.go) starts the Docker container
5. The request is proxied to the running container
6. A background process in [manager/state_manager.go](mdc:manager/state_manager.go) monitors for inactivity

## Testing

Luma includes integration tests that validate the interaction between components:
- [manager/container_state_integration_test.go](mdc:manager/container_state_integration_test.go)
- [manager/state_manager_test.go](mdc:manager/state_manager_test.go)
